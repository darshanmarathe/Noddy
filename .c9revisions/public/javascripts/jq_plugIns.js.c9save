{"ts":1381922064884,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function($) {\n  var types = 'text search number email datetime datetime-local date '\n        + 'month week time tel url color range'.split(' '),\n      len = types.length;\n  $.expr[':']['textall'] = function(elem) {\n    var type = elem.getAttribute('type');\n    for (var i = 0; i < len; i++) {\n      if (type === types[i]) {\n        return true;\n      }\n    }\n    return false;\n  };\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":394}]],"length":394}
{"contributors":[],"silentsave":false,"ts":1381921911564,"patch":[[{"diffs":[[0,"jQuery);"],[1,"\n\n//tagmanager\n/* ===================================================\n * tagmanager.js v3.0.0\n * http://welldonethings.com/tags/manager\n * ===================================================\n * Copyright 2012 Max Favilli\n *\n * Licensed under the Mozilla Public License, Version 2.0 You may not use this work except in compliance with the License.\n *\n * http://www.mozilla.org/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n(function ($) {\n\n  \"use strict\";\n\n  if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n    console = {};\n    console.log = function () { };\n  }\n\n  $.fn.tagsManager = function (options, tagToManipulate) {\n    var obj = this;\n    var rndid = \"\";\n\n    var tagManagerOptions = {\n      prefilled: null,\n      CapitalizeFirstLetter: false,\n      preventSubmitOnEnter: true, // deprecated\n      isClearInputOnEsc: true, // deprecated\n      AjaxPush: null,\n      AjaxPushAllTags: null,\n      AjaxPushParameters: null,\n      delimiters: [9, 13, 44], // tab, enter, comma\n      backspace: [8],\n      maxTags: 0,\n      hiddenTagListName: null,  // deprecated\n      hiddenTagListId: null,  // deprecated\n      replace: true,\n      output: null,\n      deleteTagsOnBackspace: true, // deprecated\n      tagsContainer: null,\n      tagCloseIcon: 'x',\n      tagClass: '',\n      validator: null,\n      onlyTagList: false\n    };\n\n    // exit when no matched elements\n    if (!(0 in this)) {\n      return this;\n    }\n\n    if (typeof options == 'string') {\n      tagManagerOptions = obj.data(\"tm_options\");\n    } else {\n      $.extend(tagManagerOptions, options);\n      obj.data(\"tm_options\", tagManagerOptions);\n    }\n\n    if (typeof options == 'string') {\n      rndid = obj.data(\"tm_rndid\");\n    } else {\n      var albet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n      for (var i = 0; i < 5; i++)\n        rndid += albet.charAt(Math.floor(Math.random() * albet.length));\n      obj.data(\"tm_rndid\", rndid);\n    }\n\n    if (tagManagerOptions.replace === true && tagManagerOptions.hiddenTagListName === null) {\n      var original_name = obj.attr('name');\n      tagManagerOptions.hiddenTagListName = original_name;\n      obj.attr('name', \"display-\" + rndid);\n    }\n    if (tagManagerOptions.hiddenTagListName === null) {\n      tagManagerOptions.hiddenTagListName = \"hidden-\" + rndid;\n    }\n\n    var delimiters = tagManagerOptions.delimeters || tagManagerOptions.delimiters; // 'delimeter' is deprecated\n    // delimiter values to be handled as key codes\n    var keyNums = [9, 13, 17, 18, 19, 37, 38, 39, 40];\n    var delimiterChars = [], delimiterKeys = [];\n    $.each(delimiters, function (i, v) {\n      if ($.inArray(v, keyNums) != -1) {\n        delimiterKeys.push(v);\n      } else {\n        delimiterChars.push(v);\n      }\n    });\n    var baseDelimiter = String.fromCharCode(delimiterChars[0] || 44);\n    var backspace = tagManagerOptions.backspace;\n    var tagBaseClass = 'tm-tag';\n    var inputBaseClass = 'tm-input';\n\n    if ($.isFunction(tagManagerOptions.validator)) obj.data('validator', tagManagerOptions.validator);\n\n\n    //var ajaxPolling = function (query, process) {\n    //  if (typeof (tagManagerOptions.typeaheadAjaxSource) == \"string\") {\n    //    $.ajax({\n    //      cache: false,\n    //      type: \"POST\",\n    //      contentType: \"application/json\",\n    //      dataType: \"json\",\n    //      url: tagManagerOptions.typeaheadAjaxSource,\n    //      data: JSON.stringify({ typeahead: query }),\n    //      success: function (data) { onTypeaheadAjaxSuccess(data, false, process); }\n    //    });\n    //  }\n    //};\n\n\n    var tagClasses = function () {\n      // 1) default class (tm-tag)\n      var cl = tagBaseClass;\n      // 2) interpolate from input class: tm-input-xxx --> tm-tag-xxx\n      if (obj.attr('class')) {\n        $.each(obj.attr('class').split(' '), function (index, value) {\n          if (value.indexOf(inputBaseClass + '-') != -1) {\n            cl += ' ' + tagBaseClass + value.substring(inputBaseClass.length);\n          }\n        });\n      }\n      // 3) tags from tagClass option\n      cl += (tagManagerOptions.tagClass ? ' ' + tagManagerOptions.tagClass : '');\n      return cl;\n    };\n\n    var trimTag = function (tag) {\n      tag = $.trim(tag);\n      // truncate at the first delimiter char\n      var i = 0;\n      for (i; i < tag.length; i++) {\n        if ($.inArray(tag.charCodeAt(i), delimiterChars) != -1) break;\n      }\n      return tag.substring(0, i);\n    };\n\n    var showOrHide = function () {\n      var tlis = obj.data(\"tlis\");\n      if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {\n        obj.show();\n        obj.trigger('tm:show');\n      }\n      if (tagManagerOptions.maxTags > 0 && tlis.length >= tagManagerOptions.maxTags) {\n        obj.hide();\n        obj.trigger('tm:hide');\n      }\n    };\n\n    var popTag = function () {\n      var tlis = obj.data(\"tlis\");\n      var tlid = obj.data(\"tlid\");\n\n      if (tlid.length > 0) {\n        var tagId = tlid.pop();\n\n        var tagBeingRemoved = tlis[tlis.length - 1];\n        obj.trigger('tm:popping', tagBeingRemoved);\n        tlis.pop();\n\n        // console.log(\"TagIdToRemove: \" + tagId);\n        $(\"#\" + rndid + \"_\" + tagId).remove();\n        refreshHiddenTagList();\n        obj.trigger('tm:popped', tagBeingRemoved);\n        // console.log(tlis);\n      }\n\n      showOrHide();\n      //if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {\n      //  obj.show();\n      //}\n    };\n\n    var empty = function () {\n      var tlis = obj.data(\"tlis\");\n      var tlid = obj.data(\"tlid\");\n\n      while (tlid.length > 0) {\n        var tagId = tlid.pop();\n        tlis.pop();\n        // console.log(\"TagIdToRemove: \" + tagId);\n        $(\"#\" + rndid + \"_\" + tagId).remove();\n        refreshHiddenTagList();\n        // console.log(tlis);\n      }\n      obj.trigger('tm:emptied', null);\n\n      showOrHide();\n      //if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {\n      //  obj.show();\n      //}\n    };\n\n    var refreshHiddenTagList = function () {\n      var tlis = obj.data(\"tlis\");\n      var lhiddenTagList = obj.data(\"lhiddenTagList\");\n\n      if (lhiddenTagList) {\n        $(lhiddenTagList).val(tlis.join(baseDelimiter)).change();\n      }\n\n      obj.trigger('tm:refresh', tlis.join(baseDelimiter));\n    };\n\n    var spliceTag = function (tagId) {\n      var tlis = obj.data(\"tlis\");\n      var tlid = obj.data(\"tlid\");\n\n      var p = $.inArray(tagId, tlid);\n\n      // console.log(\"TagIdToRemove: \" + tagId);\n      // console.log(\"position: \" + p);\n\n      if (-1 != p) {\n        var tagBeingRemoved = tlis[p];\n\n        obj.trigger('tm:splicing', tagBeingRemoved);\n\n        $(\"#\" + rndid + \"_\" + tagId).remove();\n        tlis.splice(p, 1);\n        tlid.splice(p, 1);\n        refreshHiddenTagList();\n\n        obj.trigger('tm:spliced', tagBeingRemoved);\n\n        // console.log(tlis);\n      }\n\n\n      showOrHide();\n      //if (tagManagerOptions.maxTags > 0 && tlis.length < tagManagerOptions.maxTags) {\n      //  obj.show();\n      //}\n    };\n\n    var pushAllTags = function (e, tag) {\n      if (tagManagerOptions.AjaxPushAllTags) {\n        if (e.type != 'tm:pushed' || $.inArray(tag, tagManagerOptions.prefilled) == -1) {\n          var tlis = obj.data(\"tlis\");\n          $.post(tagManagerOptions.AjaxPush, { tags: tlis.join(baseDelimiter) });\n        }\n      }\n    };\n\n    var pushTag = function (tag, ignore_events) {\n      tag = trimTag(tag);\n\n      if (!tag || tag.length <= 0) return;\n\n      if (tagManagerOptions.CapitalizeFirstLetter && tag.length > 1) {\n        tag = tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase();\n      }\n\n      // call the validator (if any) and do not let the tag pass if invalid\n      if (obj.data('validator') && !obj.data('validator')(tag)) return;\n\n      var tlis = obj.data(\"tlis\");\n      var tlid = obj.data(\"tlid\");\n\n      // dont accept new tags beyond the defined maximum\n      if (tagManagerOptions.maxTags > 0 && tlis.length >= tagManagerOptions.maxTags) return;\n\n      var alreadyInList = false;\n      var tlisLowerCase = tlis.map(function (elem) { return elem.toLowerCase(); });\n      var p = $.inArray(tag.toLowerCase(), tlisLowerCase);\n      if (-1 != p) {\n        // console.log(\"tag:\" + tag + \" !!already in list!!\");\n        alreadyInList = true;\n      }\n\n      if (alreadyInList) {\n        var pTagId = tlid[p];\n        $(\"#\" + rndid + \"_\" + pTagId).stop()\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_1 }, 100)\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_2 }, 100)\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_1 }, 100)\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_2 }, 100)\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_1 }, 100)\n          .animate({ backgroundColor: tagManagerOptions.blinkBGColor_2 }, 100);\n      } else {\n        if(!ignore_events)\n          obj.trigger('tm:pushing', tag);\n\n        var max = Math.max.apply(null, tlid);\n        max = max == -Infinity ? 0 : max;\n\n        var tagId = ++max;\n        tlis.push(tag);\n        tlid.push(tagId);\n\n        if (!ignore_events)\n          if (tagManagerOptions.AjaxPush != null) {\n            if ($.inArray(tag, tagManagerOptions.prefilled) == -1) {\n              $.post(tagManagerOptions.AjaxPush, $.extend({ tag: tag }, tagManagerOptions.AjaxPushParameters));\n            }\n          }\n\n        // console.log(\"tagList: \" + tlis);\n\n        var newTagId = rndid + '_' + tagId;\n        var newTagRemoveId = rndid + '_Remover_' + tagId;\n        var escaped = $(\"<span></span>\").text(tag).html();\n\n        var html = '<span class=\"' + tagClasses() + '\" id=\"' + newTagId + '\">';\n        html += '<span>' + escaped + '</span>';\n        html += '<a href=\"#\" class=\"tm-tag-remove\" id=\"' + newTagRemoveId + '\" TagIdToRemove=\"' + tagId + '\">';\n        html += tagManagerOptions.tagCloseIcon + '</a></span> ';\n        var $el = $(html);\n\n        if (tagManagerOptions.tagsContainer != null) {\n          $(tagManagerOptions.tagsContainer).append($el);\n        } else {\n          if (tagId > 1) {\n            var lastTagId = tagId - 1;\n            var lastTagObj = $(\"#\" + rndid + \"_\" + lastTagId);\n            lastTagObj.after($el);\n          } else {\n            obj.before($el);\n          }\n        }\n\n        $el.find(\"#\" + newTagRemoveId).on(\"click\", obj, function (e) {\n          e.preventDefault();\n          var TagIdToRemove = parseInt($(this).attr(\"TagIdToRemove\"));\n          spliceTag(TagIdToRemove, e.data);\n        });\n\n        refreshHiddenTagList();\n\n        if (!ignore_events)\n          obj.trigger('tm:pushed', tag);\n\n        showOrHide();\n        //if (tagManagerOptions.maxTags > 0 && tlis.length >= tagManagerOptions.maxTags) {\n        //  obj.hide();\n        //}\n      }\n      obj.val(\"\");\n    };\n\n    var prefill = function (pta) {\n      $.each(pta, function (key, val) {\n        pushTag(val,true);\n      });\n    };\n\n    var killEvent = function (e) {\n      e.cancelBubble = true;\n      e.returnValue = false;\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    var keyInArray = function (e, ary) {\n      return $.inArray(e.which, ary) != -1\n    };\n\n    var applyDelimiter = function (e) {\n      pushTag(obj.val());\n      e.preventDefault();\n    };\n\n    var returnValue = null;\n    this.each(function () {\n\n      if (typeof options == 'string') {\n        switch (options) {\n          case \"empty\":\n            empty();\n            break;\n          case \"popTag\":\n            popTag();\n            break;\n          case \"pushTag\":\n            pushTag(tagToManipulate);\n            break;\n          case \"tags\":\n            returnValue = { tags: obj.data(\"tlis\") };\n            break;\n        }\n        return;\n      }\n\n      // prevent double-initialization of TagManager\n      if ($(this).data('tagManager')) { return false; }\n      $(this).data('tagManager', true);\n\n      // store instance-specific data in the DOM object\n      var tlis = new Array();\n      var tlid = new Array();\n      obj.data(\"tlis\", tlis); //list of string tags\n      obj.data(\"tlid\", tlid); //list of ID of the string tags\n\n      if (tagManagerOptions.output == null) { \n        var hiddenObj = jQuery('<input/>', {\n          type: 'hidden',\n          name: tagManagerOptions.hiddenTagListName\n        });\n        obj.after(hiddenObj);\n        obj.data(\"lhiddenTagList\", hiddenObj);\n      } else {\n        obj.data(\"lhiddenTagList\", jQuery(tagManagerOptions.output))\n      }\n\n      if (tagManagerOptions.AjaxPushAllTags) {\n        obj.on('tm:spliced', pushAllTags);\n        obj.on('tm:popped', pushAllTags);\n        obj.on('tm:pushed', pushAllTags);\n      }\n\n      // hide popovers on focus and keypress events\n      obj.on('focus keypress', function (e) {\n        if ($(this).popover) {\n          $(this).popover('hide');\n        }\n      });\n\n      // handle ESC (keyup used for browser compatibility)\n      if (tagManagerOptions.isClearInputOnEsc) {\n        obj.on('keyup', function (e) {\n          if (e.which == 27) {\n            // console.log('esc detected');\n            $(this).val('');\n            killEvent(e);\n          }\n        });\n      }\n\n      obj.on('keypress', function (e) {\n        // push ASCII-based delimiters\n        if (keyInArray(e, delimiterChars)) {\n          applyDelimiter(e);\n        }\n      });\n\n      obj.on('keydown', function (e) {\n        // disable ENTER\n        if (e.which == 13) {\n          if (tagManagerOptions.preventSubmitOnEnter) {\n            killEvent(e);\n          }\n        }\n\n        // push key-based delimiters (includes <enter> by default)\n        if (keyInArray(e, delimiterKeys)) {\n          applyDelimiter(e);\n        }\n      });\n\n      // BACKSPACE (keydown used for browser compatibility)\n      if (tagManagerOptions.deleteTagsOnBackspace) {\n        obj.on('keydown', function (e) {\n          if (keyInArray(e, backspace)) {\n            // console.log(\"backspace detected\");\n            if ($(this).val().length <= 0) {\n              popTag();\n              killEvent(e);\n            }\n          }\n        });\n      }\n\n      obj.change(function (e) {\n\n        if (!/webkit/.test(navigator.userAgent.toLowerCase())) { $(this).focus(); } // why?\n\n        /* unimplemented mode to push tag on blur\n         else if (tagManagerOptions.pushTagOnBlur) {\n         console.log('change: pushTagOnBlur ' + tag);\n         pushTag($(this).val());\n         } */\n        killEvent(e);\n      });\n\n      if (tagManagerOptions.prefilled != null) {\n        if (typeof (tagManagerOptions.prefilled) == \"object\") {\n          prefill(tagManagerOptions.prefilled);\n        } else if (typeof (tagManagerOptions.prefilled) == \"string\") {\n          prefill(tagManagerOptions.prefilled.split(baseDelimiter));\n        } else if (typeof (tagManagerOptions.prefilled) == \"function\") {\n          prefill(tagManagerOptions.prefilled());\n        }\n      } else if (tagManagerOptions.output != null) {\n        if (jQuery(tagManagerOptions.output) && jQuery(tagManagerOptions.output).val())\n        var existing_tags = jQuery(tagManagerOptions.output)\n        prefill(jQuery(tagManagerOptions.output).val().split(baseDelimiter));\n      }\n    });\n\n    if (!returnValue)\n      returnValue = this;\n\n    return returnValue;\n  }\n})(jQuery);"]],"start1":386,"start2":386,"length1":8,"length2":15662}]],"length":16048,"saved":false}
